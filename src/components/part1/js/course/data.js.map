{"version":3,"sources":["data.es6"],"names":[],"mappings":";;;;;;;;;AAGA,MAAM,CAAC,YAAM;AACT,QAAM,KAAK,GAAG;;AAEV,cAAM,EAAE,gBAAU,IAAI,EAAE;;AAEpB,gBAAM,IAAI,GAAG;AACT,sBAAM,EAAE,CAAC;aACZ;;;AAAC,AAGF,gBAAI,CAAC,MAAM,CAAC,UAAA,GAAG;uBAAI,GAAG,CAAC,KAAK,KAAK,GAAG,IAAI,GAAG,CAAC,KAAK,IAAI,CAAC;aAAA,CAAC,CAClD,GAAG,CAAC,UAAU,IAAI,EAAE;AACjB,oBAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AAClB,wBAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC/B,MAAM;AACH,wBAAI,CAAC,MAAM,EAAE,CAAC;AACd,wBAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;iBAC7B;AACD,uBAAO,IAAI,CAAC;aACf,CAAC,CAAC;AACP,mBAAO,IAAI,CAAC;SACf;KACJ,CAAC;;QACI,WAAW;;;AAEb,iBAFE,WAAW,CAED,OAAO,EAAE;kCAFnB,WAAW;;AAGT,gBAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;SACzB;;AAAA;qBAJC,WAAW;;oCAML,OAAO,EAAE;;AAEb,oBAAI,OAAO,CAAC,IAAI,EAAE;AACd,wBAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBAC3B,MAAM,IAAI,OAAO,CAAC,GAAG,EAAE;;AAEpB,qBAAC,CAAC,IAAI,CAAC;AACH,2BAAG,EAAE,OAAO,CAAC,GAAG;AAChB,4BAAI,EAAE,KAAK;AACX,gCAAQ,EAAE,OAAO;qBACpB,CAAC,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE;AACtB,4BAAI,CAAC,GAAG,CAAC,MAAM,EAAE;AACb,gCAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;yBACvB;qBACJ,CAAC,CAAC;iBACN;aACJ;;;;;iCAEI,IAAI,EAAE;;AAEP,oBAAI,CAAC,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aAClC;;;eA3BC,WAAW;;;AA6BjB,WAAO,WAAW,CAAC;CACtB,CAAC,CAAA","file":"data.js","sourcesContent":["/* @grunt-build */\n/* eslint-disable */\n\ndefine(() => {\n    const utils = {\n        // 把数据按照层级进行过滤，并获取总层级数。\n        filter: function (data) {\n            // 设置初始长度为 0\n            const hash = {\n                length: 0\n            };\n            // key 为 层级，value 为包含这个层级所有数据的数组\n            // 暂时只筛选三级数据\n            data.filter(ele => ele.level === '#' || ele.level <= 3)\n                .map(function (elem) {\n                    if (hash[elem.level]) {\n                        hash[elem.level].push(elem);\n                    } else {\n                        hash.length++;\n                        hash[elem.level] = [elem];\n                    }\n                    return true;\n                });\n            return hash;\n        }\n    };\n    class NewSchedule {\n        // 初始化参数，创建课表\n        constructor(options) {\n            this.getData(options);\n        }\n        // 获取数据\n        getData(options) {\n            // 数据直接嵌入页面\n            if (options.data) {\n                this.init(options.data);\n            } else if (options.url) {\n                // 接口获取数据\n                $.ajax({\n                    url: options.url,\n                    type: 'GET',\n                    dataType: 'jsonp'\n                }).success(function (res) {\n                    if (!res.status) {\n                        this.init(res.data);\n                    }\n                });\n            }\n        }\n        // 初始化整理数据，调用创建\n        init(data) {\n            // 对数据进行筛选排列\n            this.data = utils.filter(data);\n        }\n    }\n    return NewSchedule;\n})"]}